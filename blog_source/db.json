{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/umami-view.js","path":"js/umami-view.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/ProceduralTerrainGeneration.md","hash":"80c4a830a89724b77fb2d9c0e830078952a5f19d","modified":1728659496317},{"_id":"source/_posts/StartMyBlog.md","hash":"c601978189c6966addf9039420907b7f4b2a9a48","modified":1728572314819},{"_id":"source/about/index.md","hash":"7aec451bc2f18c7faf214d34f6842149ce4d0567","modified":1728571963576},{"_id":"source/_posts/ProceduralTerrainGeneration/calc_soft_shadow.png","hash":"7bc24f450d820326f7c05fc625259f59481db0db","modified":1728292147567},{"_id":"source/_posts/ProceduralTerrainGeneration/shadertoy_oc5_noshadow.png","hash":"64c2e7528dfe87ea1e450decd23c569918479c18","modified":1727864785397},{"_id":"source/_posts/ProceduralTerrainGeneration/shadertoy_terrain_oct5.png","hash":"0f4daabfa7d24bf09919beb71c0701d1c9c7e524","modified":1727864061852},{"_id":"source/_posts/ProceduralTerrainGeneration/shadertoy_oc11_hardshadow.png","hash":"4c4b64ea717fa659999b44c3218fe77f304e1d12","modified":1727864947470},{"_id":"source/_posts/ProceduralTerrainGeneration/shadertoy_terrain.png","hash":"56cc9ca4c38d9dea545c3fc71e930ff792e46fac","modified":1727862639660},{"_id":"source/_posts/ProceduralTerrainGeneration/shadertoy_oc11_noshadow.png","hash":"48d0f8a6b7cd0289041b3bea39c24782aaf930f7","modified":1727864806418},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1721800613000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1721800613000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1721800613000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1721800613000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1721800613000},{"_id":"themes/fluid/README.md","hash":"ff9b0e1fb9dba665af2f1e4a577f8cb9e840464b","modified":1721800613000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1721800613000},{"_id":"themes/fluid/package.json","hash":"7746460fc2eba7439b494c46aa9b5ded81370819","modified":1721800613000},{"_id":"themes/fluid/_config.yml","hash":"38321d38f7da42bad1386ab91e0d0a0635cb492e","modified":1728572232516},{"_id":"themes/fluid/languages/de.yml","hash":"58dccef1d98b472dc4e6f4693c2297b0c9c5afba","modified":1721800613000},{"_id":"themes/fluid/languages/en.yml","hash":"9c580471257f5a32bee701a059a45ea96755dcdc","modified":1721800613000},{"_id":"themes/fluid/languages/es.yml","hash":"026ddf1a49bf8ddfef6ed86ab4d6af143c1dd95f","modified":1721800613000},{"_id":"themes/fluid/languages/ru.yml","hash":"93818f8bf07195fb1ebffbb5210e531b0e3a6ec4","modified":1721800613000},{"_id":"themes/fluid/languages/eo.yml","hash":"7c1a0c9f6186b6643b19d3980f055329bdb4efa4","modified":1721800613000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"a60847136709bb95586a98d9d67b50390a8d2c96","modified":1721800613000},{"_id":"themes/fluid/README_en.md","hash":"365184a73af40e7365504c3077f3d80dfee1d80e","modified":1721800613000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"e1043de394f6dcf5c0647adcfdefe60637f78426","modified":1721800613000},{"_id":"themes/fluid/languages/ja.yml","hash":"550b95d3614a64592f02666938d235e9f11e449e","modified":1721800613000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1721800613000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"51c2b4d64c6992a39bfd2586a1bdf5fbbbdf0175","modified":1721800613000},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1721800613000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1721800613000},{"_id":"themes/fluid/layout/about.ejs","hash":"052e9fc19c753f53fdc083c7fb098e3668880140","modified":1721800613000},{"_id":"themes/fluid/layout/index.ejs","hash":"33c3317cdcee062789de2336dd8d0cc7f86d3650","modified":1721800613000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1721800613000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1721800613000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1721800613000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1721800613000},{"_id":"themes/fluid/layout/post.ejs","hash":"9bf0d357a607a282f3b9cb04525a4df0cc2a8b76","modified":1721800613000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1721800613000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1721800613000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1721800613000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1721800613000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1721800613000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1721800613000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1721800613000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1721800613000},{"_id":"themes/fluid/.github/workflows/cr.yaml","hash":"19a8a00f5ba9607d82265572fe1202b64a8b0822","modified":1721800613000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"40c8b0852873032e7aaef3f68e8ea08706cdef13","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"1dadb118d580280524ed0a5f69bd34d234a92276","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"67be642f99482c07904474f410cfbc2f99003288","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1721800613000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1721800613000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1721800613000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"82bb06686158ebe160a631c79f156cd4fde35656","modified":1721800613000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1721800613000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1721800613000},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1721800613000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1721800613000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1721800613000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1721800613000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1721800613000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1721800613000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1721800613000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1721800613000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1721800613000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4d48c424e47ff9a17a563167ea5f480890267adf","modified":1721800613000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1721800613000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"966689d7c5e4320008285395fbaa2751f6209be5","modified":1721800613000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1721800613000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1721800613000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1721800613000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1721800613000},{"_id":"themes/fluid/scripts/utils/crypto.js","hash":"ae4ad8a188ef5b3fa6818b01629fc962b3de8551","modified":1721800613000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1721800613000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"6eaf53cf4bfc756a65bda18184cf8998a12c861d","modified":1721800613000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1721800613000},{"_id":"themes/fluid/scripts/tags/fold.js","hash":"73e4fd12ce3e47981479391ed354b7d9d3279f70","modified":1721800613000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1721800613000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1721800613000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1721800613000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1721800613000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1721800613000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1721800613000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1721800613000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1721800613000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1721800613000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1721800613000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1721800613000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1721800613000},{"_id":"themes/fluid/source/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1721800613000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1721800613000},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1721800613000},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1721800613000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1721800613000},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1721800613000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1721800613000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1721800613000},{"_id":"themes/fluid/source/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1721800613000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"954a29b58d72647d20450da270b5d8fb2e0824f5","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"3d08c73b77e412d2f06a24d9344565fc7dbc76f8","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"cbfa32c5f5973133afd043853b24f8200455cb2d","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"54dd479dbb440126e4ddd9d902229db5afaaae98","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"e6dcbf1c2f56314d56bb46b50aca86ff68cacebd","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1721800613000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1721800613000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1721800613000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"bd8376e1cf7892dc2daa58f2f443574be559fdbf","modified":1721800613000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"a5fe1deccb73b5f578797dbb11038efc15f63ce8","modified":1721800613000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1721800613000},{"_id":"themes/fluid/layout/_partials/plugins/moment.ejs","hash":"4ff3fb1b60ccc95a0af3bbdbd0757fedefc088b5","modified":1721800613000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1721800613000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1721800613000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1721800613000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1721800613000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"85492ef64d7e5f70f0f7e46d570bbc911e686d7e","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"25fb6fa4c783b847c632584c49a7e1593cdb2f5d","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"7eee3f78296a3c81849a5415d1d43dcc6e03e6aa","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"c96d36aa8fe20f0c3c1a29ee2473cd8064b10f73","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d42b748f2f49ef32aafb1a21d75991d2459da927","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1721800613000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1721800613000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1721800613000},{"_id":"public/local-search.xml","hash":"01c703294fd2fe14b94c30547e63c2b3eee1f1ef","modified":1728659431130},{"_id":"public/about/index.html","hash":"42b4da2eb064d9537472334c3293cea88d9e8641","modified":1728659431130},{"_id":"public/2024/10/11/ProceduralTerrainGeneration/index.html","hash":"9897598b3aabc386fdb66908cc84587323651095","modified":1728659431130},{"_id":"public/2024/10/09/StartMyBlog/index.html","hash":"733a341913055ae48c4748ff0cdef01345580cf1","modified":1728659431130},{"_id":"public/archives/index.html","hash":"c8f64a0c06965806b731fda2462bc9981466b96e","modified":1728659431130},{"_id":"public/archives/2024/index.html","hash":"c143cd7daa5a630aff94bb88c24d06735b7111b9","modified":1728659431130},{"_id":"public/archives/2024/10/index.html","hash":"b6fa8a27ce45dc091d7c71e9db113e2f7f758d44","modified":1728659431130},{"_id":"public/categories/技术漫谈/index.html","hash":"1d969c9e10d0a854ddab1986c53b60cb4a1dc125","modified":1728659431130},{"_id":"public/categories/生活杂谈/index.html","hash":"6db047ae14e08c67c5844543e290e6359e409793","modified":1728659431130},{"_id":"public/index.html","hash":"edc4f34c2963df52667a3be8a2e808a8908d04c3","modified":1728659431130},{"_id":"public/tags/3D/index.html","hash":"7885273cde6350cb76b8cb5c482a256f4e968add","modified":1728659431130},{"_id":"public/tags/render/index.html","hash":"b13d542464871d423649d23866763e8ee7b98c87","modified":1728659431130},{"_id":"public/tags/渲染/index.html","hash":"d84c48580e8ce1ddd19863df51d0d092b06312c4","modified":1728659431130},{"_id":"public/tags/编程/index.html","hash":"4ea9d92a07d35ddbb1418f209dd509e38489d8d3","modified":1728659431130},{"_id":"public/tags/生活/index.html","hash":"84520b0eb659a4595fe3f0d70956f23e18f68630","modified":1728659431130},{"_id":"public/404.html","hash":"fa292770ff11e1eb878ac1c61ae3752ee83b0a36","modified":1728659431130},{"_id":"public/tags/index.html","hash":"914cd36860aa08bbac2ceeffe2c71d89740f17a6","modified":1728659431130},{"_id":"public/categories/index.html","hash":"97f4f1b19b4a66dfde95ab36d659bf324f5c1b70","modified":1728659431130},{"_id":"public/links/index.html","hash":"b2cab5ed81d3e755889039f3f415609ce13f0553","modified":1728659431130},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1728659431130},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1728659431130},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1728659431130},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1728659431130},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1728659431130},{"_id":"public/2024/10/11/ProceduralTerrainGeneration/calc_soft_shadow.png","hash":"7bc24f450d820326f7c05fc625259f59481db0db","modified":1728659431130},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1728659431130},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1728659431130},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1728659431130},{"_id":"public/js/events.js","hash":"6869811f67e4c3de3edfa4b08464bb242b97a402","modified":1728659431130},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1728659431130},{"_id":"public/css/main.css","hash":"14ebd9b515085666cee29bbcbe362ad3604ab62a","modified":1728659431130},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1728659431130},{"_id":"public/js/color-schema.js","hash":"1ef88c881b9f942deadde3d890387b94c617342a","modified":1728659431130},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1728659431130},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1728659431130},{"_id":"public/js/umami-view.js","hash":"33c4b3883fa747604074ad3921606eeeaeb50716","modified":1728659431130},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1728659431130},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1728659431130},{"_id":"public/2024/10/11/ProceduralTerrainGeneration/shadertoy_terrain_oct5.png","hash":"0f4daabfa7d24bf09919beb71c0701d1c9c7e524","modified":1728659431130},{"_id":"public/2024/10/11/ProceduralTerrainGeneration/shadertoy_oc5_noshadow.png","hash":"64c2e7528dfe87ea1e450decd23c569918479c18","modified":1728659431130},{"_id":"public/2024/10/11/ProceduralTerrainGeneration/shadertoy_oc11_hardshadow.png","hash":"4c4b64ea717fa659999b44c3218fe77f304e1d12","modified":1728659431130},{"_id":"public/2024/10/11/ProceduralTerrainGeneration/shadertoy_terrain.png","hash":"56cc9ca4c38d9dea545c3fc71e930ff792e46fac","modified":1728659431130},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1728659431130},{"_id":"public/2024/10/11/ProceduralTerrainGeneration/shadertoy_oc11_noshadow.png","hash":"48d0f8a6b7cd0289041b3bea39c24782aaf930f7","modified":1728659431130}],"Category":[{"name":"技术漫谈","_id":"cm24v6xvi0003g057a2evej80"},{"name":"生活杂谈","_id":"cm24v6xvk0005g0573cev0wya"}],"Data":[],"Page":[{"title":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\n---\n","date":"2024-10-10T14:52:43.576Z","updated":"2024-10-10T14:52:43.576Z","path":"about/index.html","comments":1,"_id":"cm24v6xvd0000g057cuv77auo","content":"","excerpt":"","more":""}],"Post":[{"title":"程序化地形生成-1","date":"2024-10-11T14:59:27.000Z","index_img":"/2024/10/11/ProceduralTerrainGeneration/shadertoy_terrain.png","banner_img":"/2024/10/11/ProceduralTerrainGeneration/shadertoy_terrain.png","_content":"\n[ShaderToy](https://www.shadertoy.com/)是一个很有趣的网站，它上面有着非常多的渲染案例分享，最近一段时间我也是沉迷了。在看了不少大佬的作品之后，不禁手痒。前一段时间看了Inigo大佬的一个[教程案例](https://www.shadertoy.com/view/4ttSWf)，想着把这个效果自己来实现一次，因此就有了今天的这篇文章。\n\n我最终的成品也放到了shadertoy上面，有兴趣的同学可以一起讨论参考一下。看起来还不错对吧，虽然还有不少地方需要完善，但这个demo已经实现了我心中的大部分效果，包括无限的基于噪音的地形生成、地形阴影、雾气、云等等。\n\n<iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/4XByRV?gui=true&t=10&paused=true&muted=false\" allowfullscreen></iframe>\n\n那么下面，就让我来一步步说明这个demo的实现过程吧。\n\n# 基础知识\n## 在ST上渲染地形\n对ShaderToy上运行的Shader代码，对应着可编程渲染管线的片段着色器(或者叫像素着色器)。片段着色器主要是是图形光栅化后的像素信息，所以渲染3D场景需要进行一些额外的步骤。\n\nShaderToy的程序一般是这样的：\n```c\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\t...\n}\n```\n**fragColor**是输出，代表这这个像素的最终颜色；**fragCoord**是输入，代表这个像素点的xy坐标。ShaderToy提供了固定变量**iResolution**用来表示整个屏幕的xy的分辨率。\n\n为了渲染3D物体，我们需要采用ray cast/marching的方法，构建一个相机的位置作为光线射出的起点**ro**，再根据当前像素点的坐标和ro的差获得光线射出的方向**rd**。\n```c\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\t// 以屏幕中心为（0,0）\n    uv = uv * 2.0 - 1.0;\n\t// 缩放x，在画面拉伸的时候保证比例正确\n    uv.x *= iResolution.x/iResolution.y;\n\t// 原点位置\n    vec3 ro = vec3(0, 0, -1);\n    // 射线方向\n    vec3 rd = normalize(vec3(uv, 2));\n\n\tfragColor = rayMarching(ro, rd);\n}\n```\n\n## 和地形相交\n在shadertoy中渲染3D物体，一般是使用raymarching方法配合SDFs来渲染3D的物体。SDF（Signed Distance Field）是一种物体的隐式表达，用于存储和计算点到图形表面的最近距离。经由一个起点和一个方向，可以用SDF来达到低消耗的射线检测效果。\n\n这里可以参考Inigo对SDF的介绍的介绍：https://iquilezles.org/articles/distfunctions/\n\n地形的渲染也是类似的，我们通过ray marching方法来找到距离地形最近的点，以此来获取地形的形状。但是和SDF不同的是，我们无法很轻易的判断射线当前距离地形的最近距离，尤其是当我们的地形完全是通过噪音来随机生成的时候，这变成了一个不可能完成的任务。所以在判断地形相交的时候，只能回归到笨办法，一步一步慢慢的往前“挪”，*若当前的顶点在地形之下，而之前的一个迭代在地形之上的话*，那我们就找到了击中地表的区间段。\n![射线和地表相交](https://iquilezles.org/articles/terrainmarching/gfx02.png)\n``` c\nbool rayMarch(vec3 ro, vec3 rd, out float hit_t)\n{\n\tconst float dt = 0.01f;\n\tconst float min_t = 1e-3;\n\tconst float max_t = 1e3;\n\tfor(float t = min_t; t < max_t; t+=dt)\n\t{\n\t\tconst vec3 p = ro+rd*t;\n\t\tif(p.y < f(p.x, p.z));\n\t\t{\n\t\t\t// 取中间点减小误差\n\t\t\thit_t = t - 0.5f*dt;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n```\n这个方法简单易懂，但显而易见在性能上并不是最优的，尤其是涉及到范围很大的地形的时候，dt的值如果取得太小，那么渲染完成一个场景的时间将会非常的长，消耗巨大；而若是dt的值取得太大，则很有可能会出现取值错误的情况。\n\n当场景距离我们足够远的时候，由于透视的原因，近大远小，远处的场景精度对于观察者来说是越来越不重要了，因此dt的值可以随着光线步近而逐渐组建增大，动态变化。在合适的dt取值和变化曲线下，能够满足精度和性能的要求。Inigo给出的方法是类似这样的：\n```c\n//其他和上方代码一致\nfor(float t = min_t; t<max_t; t+=dt)\n{\n    const vec3 p = ro+rd*t;\n    const float h = f(p.xz);\n    if(p.y<h)\n    {\n        hit_t = t - 0.5f*dt;\n        return true;\n    }\n    dt=0.01f*t;\n}\nreturn false;\n```\nt的起始值和dt的增长倍数可以自己尝试选择一个合适的值。\n\n另外，如果我们能对最终渲染的效果有所了解的话，可以通过过滤掉很多不需要做射线检测的情况来极大的提升性能。如果我们最终的效果是一个在空中的相机，天空和地面占据画面各一半的话，那么上半部分的画面（通过rd.y>0判断）是可以完全跳过射线检测的。或者通过增加min_t的值来减少前期昂贵且不必要的性能消耗。\n\n在相交点的取值上，也可以进一步优化。原来仅仅是取两次光线步近的平均值，我们可以额外获取两次步近时位置的地形高度，用高度变化的连线和光线步近的线段做相交的判定取交点。这样得到的值将会更加精确。\n```c\n//其他和上方代码一致\nfloat lh = 0.0f;\nfloat ly = 0.0f;\nfor(float t = min_t; t<max_t; t+=dt)\n{\n    const vec3 p = ro+rd*t;\n    const float h = f(p.xz);\n    if(p.y<h)\n    {\n        // 计算两个线段的相交点\n        hit_t = t - dt + dt*(lh-ly)/(p.y-ly-h+lh);\n        return true;\n    }\n    dt=0.01f*t;\n    lh = h;\n    ly = p.y;\n}\nreturn false;\n```\n至此，我们就可以在ShaderToy渲染出地形了。\n\n# 地形生成\n## 生成的基础：噪音\n当我们提到噪音，往往会很生活化的把噪音和声音连接起来，从声学的角度来说是正确的。噪音其实可以用来表示所有通过振幅（amplitude）和频率（frequency）描述的波动，它可以是声音，它可以是辐射，也可以是其他的任意一种波动。\n\n在数学课上，我们学过正弦、余弦等三角函数，sin和cos其实就是一种噪音的表现方式。\n```c\nfloat amplitude = 1.0;\nfloat frequencey = 1.0;\nfloat y = amplitude * sin(frequency * x);\n```\n就像上面的代码所示，通过改变amplitude和frequency，我们可以改变sin波形的状态。\n\n噪音在很多程序化生成算法中都有着举足轻重的地位。\n\n## 分形布朗运动\n噪音是一种波，它是可以相互叠加的。两个相同的sin波形叠加会形成振幅更加强大的sin波形，而频率相差π/2的两个sin波形叠加后会相互抵消。\n\n在地形随机生成中，为了最终的结果噪音有着更好的随机性和更好的细节，将会循环多次计算噪音，循环的次数为我们称之为octave。每次循环的同一个噪音以一定倍数（lacunarity）升高频率，同时以一定比例（gain）降低振幅，最终将每个噪音计算的结果叠加得到一个最终的噪音，这个噪音的生成技术叫做“分形布朗运动”（fractal brownian motion，fbm）。\n\n下面是分形布朗运动的一个简单的代码演示：\n```c\nfloat fbm(vec2 uv, float frequency, float amplitude, int octave)\n{\n\tfloat lacunarity = 2.0;\n\tfloat gain = 0.5;\n\tfloat noise_val = 0.0;\n\tfloat amp = amplitude;\n\tfor(int index = 0; index < octave; ++index)\n\t{\n\t\tnose_val += noiseInterpolate(uv * frequency) * amp;\n\t\tamp *= gain;\n\t\tfrequency *= lacunarity;\n\t}\n\t\n\treturn noise_val;\n}\n```\n其中noiseInterpolate可以是perlin noise或者是simplex noise等任意一种噪音算法。\ndemo中的地形生成和云层的生成，也使用了该技术。关于FBM除了上面简单的使用还有很多其他的变种，这里我们就不扩展了，后面有机会的话可以专门介绍一下。\n\n## 地形的基础表现\n这里我将地形部分拆解出来。demo的地形计算使用了perlin noise，octave数量达到了11。更多的octave数量会给地形带来更多的细节，但是一般来说后面的效果收益会越来越少。下方是octave数量分布为5和11下的地形的形状对比。\n![](shadertoy_oc5_noshadow.png)\n![](shadertoy_oc11_noshadow.png)\n\n除了每次叠加噪音会进行频率和振幅的变化，为了获得更好的随机性，以及进一步减少噪音可能出现的重复pattern，可以将噪音进行旋转（也就是将传入的uv或者是坐标乘以一个默认的旋转矩阵）后再叠加到原来的噪音上。\n\n我们也需要地形的法线来和光源结合，渲染出地形的明暗部分。获得法线的方法有很多种，可以采样当前计算的地形上点的x轴和z轴（这里假定y轴为up）方向不远的一两个点，和目标点相减得到切线和副切线方向，通过叉乘得到目标点的法线。亦或是采样其他点后通过中心差分法求得目标点的法线。\n\n## 阴影\n仅仅通过法线来渲染地形的明部和暗部是不够的，我们还需要计算地形投射在地表上的阴影。地形的阴影计算原理非常简单，就是将地形上渲染的目标点，沿着光源方向进行射线检测，如果和地形相交的话，那该点就是处于阴影之下。理想情况下，射线检测的距离当然是实际上光源和地形上的点的距离，但是往往由于性能的原因，我们需要缩短这个距离。*实际的检测距离可以结合当前点的高度以及地形可能的最高位置进行计算*。\n\n在判断当前点处于阴影的时候，计算最终颜色的时候需要再乘以一个阴影的系数。\n![](shadertoy_oc11_hardshadow.png)\n\n为了提升效果，我们通常不希望阴影的边缘非常生硬，而是希望有一种柔软的过度，这种更加符合现实的表现。实现这种软阴影的方法可能有很多种，这里采用的是Inigo教程的一种方法。\n\n上面提到判定阴影是通过从地形上面的点向光源方向做射线检测得到的，如果和地形相交则该点处于阴影当中，若不相交，则需要再取一个值，这值是地形向着光源方向移动距离t长度的位置，它和地形高度的差值d和距离t的比值的最小值，乘以某个常数X（10~32等等，可以自己尝试合适的范围）后经过smoothstep限制在（0,1）范围内。这个值作为阴影系数放入光照计算后就可以得到不错的软阴影效果。\n![](calc_soft_shadow.png)\n\n通过下面的对比图我们可以看到，在加入了软阴影计算后，地形阴影的边缘有了一种较为平滑的过度，显得没那么生硬了。想要更改软阴影的表现的话可以通过修改常数X。\n![](shadertoy_terrain.png)\n\n# 结语\n好了，我们已经得到了一个基础的程序化生成地形的效果了，但是它看起来还是有些单调。地形的深度表现、天空、云彩等等应该如何表现呢？\n\n无需着急，我们将会在后面的文章中对它进行进一步的优化。\n\n## 参考资料\nhttps://thebookofshaders.com/13/?lan=ch\nhttps://iquilezles.org/articles/morenoise\nhttps://youtu.be/BFld4EBO2RE?si=HWQMSNx5TBsOG_6g","source":"_posts/ProceduralTerrainGeneration.md","raw":"---\ntitle: 程序化地形生成-1\ndate: 2024-10-11 22:59:27\ncategories: \n\t- 技术漫谈\ntags: \n\t- 3D\n\t- render\n\t- 渲染\n\t- 编程\nindex_img: /2024/10/11/ProceduralTerrainGeneration/shadertoy_terrain.png\nbanner_img: /2024/10/11/ProceduralTerrainGeneration/shadertoy_terrain.png\n---\n\n[ShaderToy](https://www.shadertoy.com/)是一个很有趣的网站，它上面有着非常多的渲染案例分享，最近一段时间我也是沉迷了。在看了不少大佬的作品之后，不禁手痒。前一段时间看了Inigo大佬的一个[教程案例](https://www.shadertoy.com/view/4ttSWf)，想着把这个效果自己来实现一次，因此就有了今天的这篇文章。\n\n我最终的成品也放到了shadertoy上面，有兴趣的同学可以一起讨论参考一下。看起来还不错对吧，虽然还有不少地方需要完善，但这个demo已经实现了我心中的大部分效果，包括无限的基于噪音的地形生成、地形阴影、雾气、云等等。\n\n<iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/4XByRV?gui=true&t=10&paused=true&muted=false\" allowfullscreen></iframe>\n\n那么下面，就让我来一步步说明这个demo的实现过程吧。\n\n# 基础知识\n## 在ST上渲染地形\n对ShaderToy上运行的Shader代码，对应着可编程渲染管线的片段着色器(或者叫像素着色器)。片段着色器主要是是图形光栅化后的像素信息，所以渲染3D场景需要进行一些额外的步骤。\n\nShaderToy的程序一般是这样的：\n```c\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\t...\n}\n```\n**fragColor**是输出，代表这这个像素的最终颜色；**fragCoord**是输入，代表这个像素点的xy坐标。ShaderToy提供了固定变量**iResolution**用来表示整个屏幕的xy的分辨率。\n\n为了渲染3D物体，我们需要采用ray cast/marching的方法，构建一个相机的位置作为光线射出的起点**ro**，再根据当前像素点的坐标和ro的差获得光线射出的方向**rd**。\n```c\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\t// 以屏幕中心为（0,0）\n    uv = uv * 2.0 - 1.0;\n\t// 缩放x，在画面拉伸的时候保证比例正确\n    uv.x *= iResolution.x/iResolution.y;\n\t// 原点位置\n    vec3 ro = vec3(0, 0, -1);\n    // 射线方向\n    vec3 rd = normalize(vec3(uv, 2));\n\n\tfragColor = rayMarching(ro, rd);\n}\n```\n\n## 和地形相交\n在shadertoy中渲染3D物体，一般是使用raymarching方法配合SDFs来渲染3D的物体。SDF（Signed Distance Field）是一种物体的隐式表达，用于存储和计算点到图形表面的最近距离。经由一个起点和一个方向，可以用SDF来达到低消耗的射线检测效果。\n\n这里可以参考Inigo对SDF的介绍的介绍：https://iquilezles.org/articles/distfunctions/\n\n地形的渲染也是类似的，我们通过ray marching方法来找到距离地形最近的点，以此来获取地形的形状。但是和SDF不同的是，我们无法很轻易的判断射线当前距离地形的最近距离，尤其是当我们的地形完全是通过噪音来随机生成的时候，这变成了一个不可能完成的任务。所以在判断地形相交的时候，只能回归到笨办法，一步一步慢慢的往前“挪”，*若当前的顶点在地形之下，而之前的一个迭代在地形之上的话*，那我们就找到了击中地表的区间段。\n![射线和地表相交](https://iquilezles.org/articles/terrainmarching/gfx02.png)\n``` c\nbool rayMarch(vec3 ro, vec3 rd, out float hit_t)\n{\n\tconst float dt = 0.01f;\n\tconst float min_t = 1e-3;\n\tconst float max_t = 1e3;\n\tfor(float t = min_t; t < max_t; t+=dt)\n\t{\n\t\tconst vec3 p = ro+rd*t;\n\t\tif(p.y < f(p.x, p.z));\n\t\t{\n\t\t\t// 取中间点减小误差\n\t\t\thit_t = t - 0.5f*dt;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n```\n这个方法简单易懂，但显而易见在性能上并不是最优的，尤其是涉及到范围很大的地形的时候，dt的值如果取得太小，那么渲染完成一个场景的时间将会非常的长，消耗巨大；而若是dt的值取得太大，则很有可能会出现取值错误的情况。\n\n当场景距离我们足够远的时候，由于透视的原因，近大远小，远处的场景精度对于观察者来说是越来越不重要了，因此dt的值可以随着光线步近而逐渐组建增大，动态变化。在合适的dt取值和变化曲线下，能够满足精度和性能的要求。Inigo给出的方法是类似这样的：\n```c\n//其他和上方代码一致\nfor(float t = min_t; t<max_t; t+=dt)\n{\n    const vec3 p = ro+rd*t;\n    const float h = f(p.xz);\n    if(p.y<h)\n    {\n        hit_t = t - 0.5f*dt;\n        return true;\n    }\n    dt=0.01f*t;\n}\nreturn false;\n```\nt的起始值和dt的增长倍数可以自己尝试选择一个合适的值。\n\n另外，如果我们能对最终渲染的效果有所了解的话，可以通过过滤掉很多不需要做射线检测的情况来极大的提升性能。如果我们最终的效果是一个在空中的相机，天空和地面占据画面各一半的话，那么上半部分的画面（通过rd.y>0判断）是可以完全跳过射线检测的。或者通过增加min_t的值来减少前期昂贵且不必要的性能消耗。\n\n在相交点的取值上，也可以进一步优化。原来仅仅是取两次光线步近的平均值，我们可以额外获取两次步近时位置的地形高度，用高度变化的连线和光线步近的线段做相交的判定取交点。这样得到的值将会更加精确。\n```c\n//其他和上方代码一致\nfloat lh = 0.0f;\nfloat ly = 0.0f;\nfor(float t = min_t; t<max_t; t+=dt)\n{\n    const vec3 p = ro+rd*t;\n    const float h = f(p.xz);\n    if(p.y<h)\n    {\n        // 计算两个线段的相交点\n        hit_t = t - dt + dt*(lh-ly)/(p.y-ly-h+lh);\n        return true;\n    }\n    dt=0.01f*t;\n    lh = h;\n    ly = p.y;\n}\nreturn false;\n```\n至此，我们就可以在ShaderToy渲染出地形了。\n\n# 地形生成\n## 生成的基础：噪音\n当我们提到噪音，往往会很生活化的把噪音和声音连接起来，从声学的角度来说是正确的。噪音其实可以用来表示所有通过振幅（amplitude）和频率（frequency）描述的波动，它可以是声音，它可以是辐射，也可以是其他的任意一种波动。\n\n在数学课上，我们学过正弦、余弦等三角函数，sin和cos其实就是一种噪音的表现方式。\n```c\nfloat amplitude = 1.0;\nfloat frequencey = 1.0;\nfloat y = amplitude * sin(frequency * x);\n```\n就像上面的代码所示，通过改变amplitude和frequency，我们可以改变sin波形的状态。\n\n噪音在很多程序化生成算法中都有着举足轻重的地位。\n\n## 分形布朗运动\n噪音是一种波，它是可以相互叠加的。两个相同的sin波形叠加会形成振幅更加强大的sin波形，而频率相差π/2的两个sin波形叠加后会相互抵消。\n\n在地形随机生成中，为了最终的结果噪音有着更好的随机性和更好的细节，将会循环多次计算噪音，循环的次数为我们称之为octave。每次循环的同一个噪音以一定倍数（lacunarity）升高频率，同时以一定比例（gain）降低振幅，最终将每个噪音计算的结果叠加得到一个最终的噪音，这个噪音的生成技术叫做“分形布朗运动”（fractal brownian motion，fbm）。\n\n下面是分形布朗运动的一个简单的代码演示：\n```c\nfloat fbm(vec2 uv, float frequency, float amplitude, int octave)\n{\n\tfloat lacunarity = 2.0;\n\tfloat gain = 0.5;\n\tfloat noise_val = 0.0;\n\tfloat amp = amplitude;\n\tfor(int index = 0; index < octave; ++index)\n\t{\n\t\tnose_val += noiseInterpolate(uv * frequency) * amp;\n\t\tamp *= gain;\n\t\tfrequency *= lacunarity;\n\t}\n\t\n\treturn noise_val;\n}\n```\n其中noiseInterpolate可以是perlin noise或者是simplex noise等任意一种噪音算法。\ndemo中的地形生成和云层的生成，也使用了该技术。关于FBM除了上面简单的使用还有很多其他的变种，这里我们就不扩展了，后面有机会的话可以专门介绍一下。\n\n## 地形的基础表现\n这里我将地形部分拆解出来。demo的地形计算使用了perlin noise，octave数量达到了11。更多的octave数量会给地形带来更多的细节，但是一般来说后面的效果收益会越来越少。下方是octave数量分布为5和11下的地形的形状对比。\n![](shadertoy_oc5_noshadow.png)\n![](shadertoy_oc11_noshadow.png)\n\n除了每次叠加噪音会进行频率和振幅的变化，为了获得更好的随机性，以及进一步减少噪音可能出现的重复pattern，可以将噪音进行旋转（也就是将传入的uv或者是坐标乘以一个默认的旋转矩阵）后再叠加到原来的噪音上。\n\n我们也需要地形的法线来和光源结合，渲染出地形的明暗部分。获得法线的方法有很多种，可以采样当前计算的地形上点的x轴和z轴（这里假定y轴为up）方向不远的一两个点，和目标点相减得到切线和副切线方向，通过叉乘得到目标点的法线。亦或是采样其他点后通过中心差分法求得目标点的法线。\n\n## 阴影\n仅仅通过法线来渲染地形的明部和暗部是不够的，我们还需要计算地形投射在地表上的阴影。地形的阴影计算原理非常简单，就是将地形上渲染的目标点，沿着光源方向进行射线检测，如果和地形相交的话，那该点就是处于阴影之下。理想情况下，射线检测的距离当然是实际上光源和地形上的点的距离，但是往往由于性能的原因，我们需要缩短这个距离。*实际的检测距离可以结合当前点的高度以及地形可能的最高位置进行计算*。\n\n在判断当前点处于阴影的时候，计算最终颜色的时候需要再乘以一个阴影的系数。\n![](shadertoy_oc11_hardshadow.png)\n\n为了提升效果，我们通常不希望阴影的边缘非常生硬，而是希望有一种柔软的过度，这种更加符合现实的表现。实现这种软阴影的方法可能有很多种，这里采用的是Inigo教程的一种方法。\n\n上面提到判定阴影是通过从地形上面的点向光源方向做射线检测得到的，如果和地形相交则该点处于阴影当中，若不相交，则需要再取一个值，这值是地形向着光源方向移动距离t长度的位置，它和地形高度的差值d和距离t的比值的最小值，乘以某个常数X（10~32等等，可以自己尝试合适的范围）后经过smoothstep限制在（0,1）范围内。这个值作为阴影系数放入光照计算后就可以得到不错的软阴影效果。\n![](calc_soft_shadow.png)\n\n通过下面的对比图我们可以看到，在加入了软阴影计算后，地形阴影的边缘有了一种较为平滑的过度，显得没那么生硬了。想要更改软阴影的表现的话可以通过修改常数X。\n![](shadertoy_terrain.png)\n\n# 结语\n好了，我们已经得到了一个基础的程序化生成地形的效果了，但是它看起来还是有些单调。地形的深度表现、天空、云彩等等应该如何表现呢？\n\n无需着急，我们将会在后面的文章中对它进行进一步的优化。\n\n## 参考资料\nhttps://thebookofshaders.com/13/?lan=ch\nhttps://iquilezles.org/articles/morenoise\nhttps://youtu.be/BFld4EBO2RE?si=HWQMSNx5TBsOG_6g","slug":"ProceduralTerrainGeneration","published":1,"updated":"2024-10-11T15:11:36.317Z","_id":"cm24v6xvf0001g05733a8b2sr","comments":1,"layout":"post","photos":[],"content":"<p><a href=\"https://www.shadertoy.com/\">ShaderToy</a>是一个很有趣的网站，它上面有着非常多的渲染案例分享，最近一段时间我也是沉迷了。在看了不少大佬的作品之后，不禁手痒。前一段时间看了Inigo大佬的一个<a href=\"https://www.shadertoy.com/view/4ttSWf\">教程案例</a>，想着把这个效果自己来实现一次，因此就有了今天的这篇文章。</p>\n<p>我最终的成品也放到了shadertoy上面，有兴趣的同学可以一起讨论参考一下。看起来还不错对吧，虽然还有不少地方需要完善，但这个demo已经实现了我心中的大部分效果，包括无限的基于噪音的地形生成、地形阴影、雾气、云等等。</p>\n<iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/4XByRV?gui=true&t=10&paused=true&muted=false\" allowfullscreen></iframe>\n\n<p>那么下面，就让我来一步步说明这个demo的实现过程吧。</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"在ST上渲染地形\"><a href=\"#在ST上渲染地形\" class=\"headerlink\" title=\"在ST上渲染地形\"></a>在ST上渲染地形</h2><p>对ShaderToy上运行的Shader代码，对应着可编程渲染管线的片段着色器(或者叫像素着色器)。片段着色器主要是是图形光栅化后的像素信息，所以渲染3D场景需要进行一些额外的步骤。</p>\n<p>ShaderToy的程序一般是这样的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">mainImage</span><span class=\"hljs-params\">(out vec4 fragColor, in vec2 fragCoord)</span><br>&#123;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>fragColor</strong>是输出，代表这这个像素的最终颜色；<strong>fragCoord</strong>是输入，代表这个像素点的xy坐标。ShaderToy提供了固定变量<strong>iResolution</strong>用来表示整个屏幕的xy的分辨率。</p>\n<p>为了渲染3D物体，我们需要采用ray cast&#x2F;marching的方法，构建一个相机的位置作为光线射出的起点<strong>ro</strong>，再根据当前像素点的坐标和ro的差获得光线射出的方向<strong>rd</strong>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">mainImage</span><span class=\"hljs-params\">(out vec4 fragColor, in vec2 fragCoord)</span><br>&#123;<br>    vec2 uv = fragCoord / iResolution.xy;<br>\t<span class=\"hljs-comment\">// 以屏幕中心为（0,0）</span><br>    uv = uv * <span class=\"hljs-number\">2.0</span> - <span class=\"hljs-number\">1.0</span>;<br>\t<span class=\"hljs-comment\">// 缩放x，在画面拉伸的时候保证比例正确</span><br>    uv.x *= iResolution.x/iResolution.y;<br>\t<span class=\"hljs-comment\">// 原点位置</span><br>    vec3 ro = vec3(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-comment\">// 射线方向</span><br>    vec3 rd = normalize(vec3(uv, <span class=\"hljs-number\">2</span>));<br><br>\tfragColor = rayMarching(ro, rd);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"和地形相交\"><a href=\"#和地形相交\" class=\"headerlink\" title=\"和地形相交\"></a>和地形相交</h2><p>在shadertoy中渲染3D物体，一般是使用raymarching方法配合SDFs来渲染3D的物体。SDF（Signed Distance Field）是一种物体的隐式表达，用于存储和计算点到图形表面的最近距离。经由一个起点和一个方向，可以用SDF来达到低消耗的射线检测效果。</p>\n<p>这里可以参考Inigo对SDF的介绍的介绍：<a href=\"https://iquilezles.org/articles/distfunctions/\">https://iquilezles.org/articles/distfunctions/</a></p>\n<p>地形的渲染也是类似的，我们通过ray marching方法来找到距离地形最近的点，以此来获取地形的形状。但是和SDF不同的是，我们无法很轻易的判断射线当前距离地形的最近距离，尤其是当我们的地形完全是通过噪音来随机生成的时候，这变成了一个不可能完成的任务。所以在判断地形相交的时候，只能回归到笨办法，一步一步慢慢的往前“挪”，<em>若当前的顶点在地形之下，而之前的一个迭代在地形之上的话</em>，那我们就找到了击中地表的区间段。<br><img src=\"https://iquilezles.org/articles/terrainmarching/gfx02.png\" alt=\"射线和地表相交\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">rayMarch</span><span class=\"hljs-params\">(vec3 ro, vec3 rd, out <span class=\"hljs-type\">float</span> <span class=\"hljs-type\">hit_t</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> dt = <span class=\"hljs-number\">0.01f</span>;<br>\t<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-type\">min_t</span> = <span class=\"hljs-number\">1e-3</span>;<br>\t<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-type\">max_t</span> = <span class=\"hljs-number\">1e3</span>;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">float</span> t = <span class=\"hljs-type\">min_t</span>; t &lt; <span class=\"hljs-type\">max_t</span>; t+=dt)<br>\t&#123;<br>\t\t<span class=\"hljs-type\">const</span> vec3 p = ro+rd*t;<br>\t\t<span class=\"hljs-keyword\">if</span>(p.y &lt; f(p.x, p.z));<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-comment\">// 取中间点减小误差</span><br>\t\t\t<span class=\"hljs-type\">hit_t</span> = t - <span class=\"hljs-number\">0.5f</span>*dt;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这个方法简单易懂，但显而易见在性能上并不是最优的，尤其是涉及到范围很大的地形的时候，dt的值如果取得太小，那么渲染完成一个场景的时间将会非常的长，消耗巨大；而若是dt的值取得太大，则很有可能会出现取值错误的情况。</p>\n<p>当场景距离我们足够远的时候，由于透视的原因，近大远小，远处的场景精度对于观察者来说是越来越不重要了，因此dt的值可以随着光线步近而逐渐组建增大，动态变化。在合适的dt取值和变化曲线下，能够满足精度和性能的要求。Inigo给出的方法是类似这样的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//其他和上方代码一致</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">float</span> t = <span class=\"hljs-type\">min_t</span>; t&lt;<span class=\"hljs-type\">max_t</span>; t+=dt)<br>&#123;<br>    <span class=\"hljs-type\">const</span> vec3 p = ro+rd*t;<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> h = f(p.xz);<br>    <span class=\"hljs-keyword\">if</span>(p.y&lt;h)<br>    &#123;<br>        <span class=\"hljs-type\">hit_t</span> = t - <span class=\"hljs-number\">0.5f</span>*dt;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    dt=<span class=\"hljs-number\">0.01f</span>*t;<br>&#125;<br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br></code></pre></td></tr></table></figure>\n<p>t的起始值和dt的增长倍数可以自己尝试选择一个合适的值。</p>\n<p>另外，如果我们能对最终渲染的效果有所了解的话，可以通过过滤掉很多不需要做射线检测的情况来极大的提升性能。如果我们最终的效果是一个在空中的相机，天空和地面占据画面各一半的话，那么上半部分的画面（通过rd.y&gt;0判断）是可以完全跳过射线检测的。或者通过增加min_t的值来减少前期昂贵且不必要的性能消耗。</p>\n<p>在相交点的取值上，也可以进一步优化。原来仅仅是取两次光线步近的平均值，我们可以额外获取两次步近时位置的地形高度，用高度变化的连线和光线步近的线段做相交的判定取交点。这样得到的值将会更加精确。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//其他和上方代码一致</span><br><span class=\"hljs-type\">float</span> lh = <span class=\"hljs-number\">0.0f</span>;<br><span class=\"hljs-type\">float</span> ly = <span class=\"hljs-number\">0.0f</span>;<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">float</span> t = <span class=\"hljs-type\">min_t</span>; t&lt;<span class=\"hljs-type\">max_t</span>; t+=dt)<br>&#123;<br>    <span class=\"hljs-type\">const</span> vec3 p = ro+rd*t;<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> h = f(p.xz);<br>    <span class=\"hljs-keyword\">if</span>(p.y&lt;h)<br>    &#123;<br>        <span class=\"hljs-comment\">// 计算两个线段的相交点</span><br>        <span class=\"hljs-type\">hit_t</span> = t - dt + dt*(lh-ly)/(p.y-ly-h+lh);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    dt=<span class=\"hljs-number\">0.01f</span>*t;<br>    lh = h;<br>    ly = p.y;<br>&#125;<br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br></code></pre></td></tr></table></figure>\n<p>至此，我们就可以在ShaderToy渲染出地形了。</p>\n<h1 id=\"地形生成\"><a href=\"#地形生成\" class=\"headerlink\" title=\"地形生成\"></a>地形生成</h1><h2 id=\"生成的基础：噪音\"><a href=\"#生成的基础：噪音\" class=\"headerlink\" title=\"生成的基础：噪音\"></a>生成的基础：噪音</h2><p>当我们提到噪音，往往会很生活化的把噪音和声音连接起来，从声学的角度来说是正确的。噪音其实可以用来表示所有通过振幅（amplitude）和频率（frequency）描述的波动，它可以是声音，它可以是辐射，也可以是其他的任意一种波动。</p>\n<p>在数学课上，我们学过正弦、余弦等三角函数，sin和cos其实就是一种噪音的表现方式。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">float</span> amplitude = <span class=\"hljs-number\">1.0</span>;<br><span class=\"hljs-type\">float</span> frequencey = <span class=\"hljs-number\">1.0</span>;<br><span class=\"hljs-type\">float</span> y = amplitude * <span class=\"hljs-built_in\">sin</span>(frequency * x);<br></code></pre></td></tr></table></figure>\n<p>就像上面的代码所示，通过改变amplitude和frequency，我们可以改变sin波形的状态。</p>\n<p>噪音在很多程序化生成算法中都有着举足轻重的地位。</p>\n<h2 id=\"分形布朗运动\"><a href=\"#分形布朗运动\" class=\"headerlink\" title=\"分形布朗运动\"></a>分形布朗运动</h2><p>噪音是一种波，它是可以相互叠加的。两个相同的sin波形叠加会形成振幅更加强大的sin波形，而频率相差π&#x2F;2的两个sin波形叠加后会相互抵消。</p>\n<p>在地形随机生成中，为了最终的结果噪音有着更好的随机性和更好的细节，将会循环多次计算噪音，循环的次数为我们称之为octave。每次循环的同一个噪音以一定倍数（lacunarity）升高频率，同时以一定比例（gain）降低振幅，最终将每个噪音计算的结果叠加得到一个最终的噪音，这个噪音的生成技术叫做“分形布朗运动”（fractal brownian motion，fbm）。</p>\n<p>下面是分形布朗运动的一个简单的代码演示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title function_\">fbm</span><span class=\"hljs-params\">(vec2 uv, <span class=\"hljs-type\">float</span> frequency, <span class=\"hljs-type\">float</span> amplitude, <span class=\"hljs-type\">int</span> octave)</span><br>&#123;<br>\t<span class=\"hljs-type\">float</span> lacunarity = <span class=\"hljs-number\">2.0</span>;<br>\t<span class=\"hljs-type\">float</span> gain = <span class=\"hljs-number\">0.5</span>;<br>\t<span class=\"hljs-type\">float</span> noise_val = <span class=\"hljs-number\">0.0</span>;<br>\t<span class=\"hljs-type\">float</span> amp = amplitude;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index = <span class=\"hljs-number\">0</span>; index &lt; octave; ++index)<br>\t&#123;<br>\t\tnose_val += noiseInterpolate(uv * frequency) * amp;<br>\t\tamp *= gain;<br>\t\tfrequency *= lacunarity;<br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">return</span> noise_val;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>其中noiseInterpolate可以是perlin noise或者是simplex noise等任意一种噪音算法。<br>demo中的地形生成和云层的生成，也使用了该技术。关于FBM除了上面简单的使用还有很多其他的变种，这里我们就不扩展了，后面有机会的话可以专门介绍一下。</p>\n<h2 id=\"地形的基础表现\"><a href=\"#地形的基础表现\" class=\"headerlink\" title=\"地形的基础表现\"></a>地形的基础表现</h2><p>这里我将地形部分拆解出来。demo的地形计算使用了perlin noise，octave数量达到了11。更多的octave数量会给地形带来更多的细节，但是一般来说后面的效果收益会越来越少。下方是octave数量分布为5和11下的地形的形状对比。<br><img src=\"/2024/10/11/ProceduralTerrainGeneration/shadertoy_oc5_noshadow.png\"><br><img src=\"/2024/10/11/ProceduralTerrainGeneration/shadertoy_oc11_noshadow.png\"></p>\n<p>除了每次叠加噪音会进行频率和振幅的变化，为了获得更好的随机性，以及进一步减少噪音可能出现的重复pattern，可以将噪音进行旋转（也就是将传入的uv或者是坐标乘以一个默认的旋转矩阵）后再叠加到原来的噪音上。</p>\n<p>我们也需要地形的法线来和光源结合，渲染出地形的明暗部分。获得法线的方法有很多种，可以采样当前计算的地形上点的x轴和z轴（这里假定y轴为up）方向不远的一两个点，和目标点相减得到切线和副切线方向，通过叉乘得到目标点的法线。亦或是采样其他点后通过中心差分法求得目标点的法线。</p>\n<h2 id=\"阴影\"><a href=\"#阴影\" class=\"headerlink\" title=\"阴影\"></a>阴影</h2><p>仅仅通过法线来渲染地形的明部和暗部是不够的，我们还需要计算地形投射在地表上的阴影。地形的阴影计算原理非常简单，就是将地形上渲染的目标点，沿着光源方向进行射线检测，如果和地形相交的话，那该点就是处于阴影之下。理想情况下，射线检测的距离当然是实际上光源和地形上的点的距离，但是往往由于性能的原因，我们需要缩短这个距离。<em>实际的检测距离可以结合当前点的高度以及地形可能的最高位置进行计算</em>。</p>\n<p>在判断当前点处于阴影的时候，计算最终颜色的时候需要再乘以一个阴影的系数。<br><img src=\"/2024/10/11/ProceduralTerrainGeneration/shadertoy_oc11_hardshadow.png\"></p>\n<p>为了提升效果，我们通常不希望阴影的边缘非常生硬，而是希望有一种柔软的过度，这种更加符合现实的表现。实现这种软阴影的方法可能有很多种，这里采用的是Inigo教程的一种方法。</p>\n<p>上面提到判定阴影是通过从地形上面的点向光源方向做射线检测得到的，如果和地形相交则该点处于阴影当中，若不相交，则需要再取一个值，这值是地形向着光源方向移动距离t长度的位置，它和地形高度的差值d和距离t的比值的最小值，乘以某个常数X（10~32等等，可以自己尝试合适的范围）后经过smoothstep限制在（0,1）范围内。这个值作为阴影系数放入光照计算后就可以得到不错的软阴影效果。<br><img src=\"/2024/10/11/ProceduralTerrainGeneration/calc_soft_shadow.png\"></p>\n<p>通过下面的对比图我们可以看到，在加入了软阴影计算后，地形阴影的边缘有了一种较为平滑的过度，显得没那么生硬了。想要更改软阴影的表现的话可以通过修改常数X。<br><img src=\"/2024/10/11/ProceduralTerrainGeneration/shadertoy_terrain.png\"></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>好了，我们已经得到了一个基础的程序化生成地形的效果了，但是它看起来还是有些单调。地形的深度表现、天空、云彩等等应该如何表现呢？</p>\n<p>无需着急，我们将会在后面的文章中对它进行进一步的优化。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://thebookofshaders.com/13/?lan=ch\">https://thebookofshaders.com/13/?lan=ch</a><br><a href=\"https://iquilezles.org/articles/morenoise\">https://iquilezles.org/articles/morenoise</a><br><a href=\"https://youtu.be/BFld4EBO2RE?si=HWQMSNx5TBsOG_6g\">https://youtu.be/BFld4EBO2RE?si=HWQMSNx5TBsOG_6g</a></p>\n","excerpt":"","more":"<p><a href=\"https://www.shadertoy.com/\">ShaderToy</a>是一个很有趣的网站，它上面有着非常多的渲染案例分享，最近一段时间我也是沉迷了。在看了不少大佬的作品之后，不禁手痒。前一段时间看了Inigo大佬的一个<a href=\"https://www.shadertoy.com/view/4ttSWf\">教程案例</a>，想着把这个效果自己来实现一次，因此就有了今天的这篇文章。</p>\n<p>我最终的成品也放到了shadertoy上面，有兴趣的同学可以一起讨论参考一下。看起来还不错对吧，虽然还有不少地方需要完善，但这个demo已经实现了我心中的大部分效果，包括无限的基于噪音的地形生成、地形阴影、雾气、云等等。</p>\n<iframe width=\"640\" height=\"360\" frameborder=\"0\" src=\"https://www.shadertoy.com/embed/4XByRV?gui=true&t=10&paused=true&muted=false\" allowfullscreen></iframe>\n\n<p>那么下面，就让我来一步步说明这个demo的实现过程吧。</p>\n<h1 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h1><h2 id=\"在ST上渲染地形\"><a href=\"#在ST上渲染地形\" class=\"headerlink\" title=\"在ST上渲染地形\"></a>在ST上渲染地形</h2><p>对ShaderToy上运行的Shader代码，对应着可编程渲染管线的片段着色器(或者叫像素着色器)。片段着色器主要是是图形光栅化后的像素信息，所以渲染3D场景需要进行一些额外的步骤。</p>\n<p>ShaderToy的程序一般是这样的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">mainImage</span><span class=\"hljs-params\">(out vec4 fragColor, in vec2 fragCoord)</span><br>&#123;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>fragColor</strong>是输出，代表这这个像素的最终颜色；<strong>fragCoord</strong>是输入，代表这个像素点的xy坐标。ShaderToy提供了固定变量<strong>iResolution</strong>用来表示整个屏幕的xy的分辨率。</p>\n<p>为了渲染3D物体，我们需要采用ray cast&#x2F;marching的方法，构建一个相机的位置作为光线射出的起点<strong>ro</strong>，再根据当前像素点的坐标和ro的差获得光线射出的方向<strong>rd</strong>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">mainImage</span><span class=\"hljs-params\">(out vec4 fragColor, in vec2 fragCoord)</span><br>&#123;<br>    vec2 uv = fragCoord / iResolution.xy;<br>\t<span class=\"hljs-comment\">// 以屏幕中心为（0,0）</span><br>    uv = uv * <span class=\"hljs-number\">2.0</span> - <span class=\"hljs-number\">1.0</span>;<br>\t<span class=\"hljs-comment\">// 缩放x，在画面拉伸的时候保证比例正确</span><br>    uv.x *= iResolution.x/iResolution.y;<br>\t<span class=\"hljs-comment\">// 原点位置</span><br>    vec3 ro = vec3(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-comment\">// 射线方向</span><br>    vec3 rd = normalize(vec3(uv, <span class=\"hljs-number\">2</span>));<br><br>\tfragColor = rayMarching(ro, rd);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"和地形相交\"><a href=\"#和地形相交\" class=\"headerlink\" title=\"和地形相交\"></a>和地形相交</h2><p>在shadertoy中渲染3D物体，一般是使用raymarching方法配合SDFs来渲染3D的物体。SDF（Signed Distance Field）是一种物体的隐式表达，用于存储和计算点到图形表面的最近距离。经由一个起点和一个方向，可以用SDF来达到低消耗的射线检测效果。</p>\n<p>这里可以参考Inigo对SDF的介绍的介绍：<a href=\"https://iquilezles.org/articles/distfunctions/\">https://iquilezles.org/articles/distfunctions/</a></p>\n<p>地形的渲染也是类似的，我们通过ray marching方法来找到距离地形最近的点，以此来获取地形的形状。但是和SDF不同的是，我们无法很轻易的判断射线当前距离地形的最近距离，尤其是当我们的地形完全是通过噪音来随机生成的时候，这变成了一个不可能完成的任务。所以在判断地形相交的时候，只能回归到笨办法，一步一步慢慢的往前“挪”，<em>若当前的顶点在地形之下，而之前的一个迭代在地形之上的话</em>，那我们就找到了击中地表的区间段。<br><img src=\"https://iquilezles.org/articles/terrainmarching/gfx02.png\" alt=\"射线和地表相交\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">rayMarch</span><span class=\"hljs-params\">(vec3 ro, vec3 rd, out <span class=\"hljs-type\">float</span> <span class=\"hljs-type\">hit_t</span>)</span><br>&#123;<br>\t<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> dt = <span class=\"hljs-number\">0.01f</span>;<br>\t<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-type\">min_t</span> = <span class=\"hljs-number\">1e-3</span>;<br>\t<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-type\">max_t</span> = <span class=\"hljs-number\">1e3</span>;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">float</span> t = <span class=\"hljs-type\">min_t</span>; t &lt; <span class=\"hljs-type\">max_t</span>; t+=dt)<br>\t&#123;<br>\t\t<span class=\"hljs-type\">const</span> vec3 p = ro+rd*t;<br>\t\t<span class=\"hljs-keyword\">if</span>(p.y &lt; f(p.x, p.z));<br>\t\t&#123;<br>\t\t\t<span class=\"hljs-comment\">// 取中间点减小误差</span><br>\t\t\t<span class=\"hljs-type\">hit_t</span> = t - <span class=\"hljs-number\">0.5f</span>*dt;<br>\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这个方法简单易懂，但显而易见在性能上并不是最优的，尤其是涉及到范围很大的地形的时候，dt的值如果取得太小，那么渲染完成一个场景的时间将会非常的长，消耗巨大；而若是dt的值取得太大，则很有可能会出现取值错误的情况。</p>\n<p>当场景距离我们足够远的时候，由于透视的原因，近大远小，远处的场景精度对于观察者来说是越来越不重要了，因此dt的值可以随着光线步近而逐渐组建增大，动态变化。在合适的dt取值和变化曲线下，能够满足精度和性能的要求。Inigo给出的方法是类似这样的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//其他和上方代码一致</span><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">float</span> t = <span class=\"hljs-type\">min_t</span>; t&lt;<span class=\"hljs-type\">max_t</span>; t+=dt)<br>&#123;<br>    <span class=\"hljs-type\">const</span> vec3 p = ro+rd*t;<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> h = f(p.xz);<br>    <span class=\"hljs-keyword\">if</span>(p.y&lt;h)<br>    &#123;<br>        <span class=\"hljs-type\">hit_t</span> = t - <span class=\"hljs-number\">0.5f</span>*dt;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    dt=<span class=\"hljs-number\">0.01f</span>*t;<br>&#125;<br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br></code></pre></td></tr></table></figure>\n<p>t的起始值和dt的增长倍数可以自己尝试选择一个合适的值。</p>\n<p>另外，如果我们能对最终渲染的效果有所了解的话，可以通过过滤掉很多不需要做射线检测的情况来极大的提升性能。如果我们最终的效果是一个在空中的相机，天空和地面占据画面各一半的话，那么上半部分的画面（通过rd.y&gt;0判断）是可以完全跳过射线检测的。或者通过增加min_t的值来减少前期昂贵且不必要的性能消耗。</p>\n<p>在相交点的取值上，也可以进一步优化。原来仅仅是取两次光线步近的平均值，我们可以额外获取两次步近时位置的地形高度，用高度变化的连线和光线步近的线段做相交的判定取交点。这样得到的值将会更加精确。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//其他和上方代码一致</span><br><span class=\"hljs-type\">float</span> lh = <span class=\"hljs-number\">0.0f</span>;<br><span class=\"hljs-type\">float</span> ly = <span class=\"hljs-number\">0.0f</span>;<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">float</span> t = <span class=\"hljs-type\">min_t</span>; t&lt;<span class=\"hljs-type\">max_t</span>; t+=dt)<br>&#123;<br>    <span class=\"hljs-type\">const</span> vec3 p = ro+rd*t;<br>    <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">float</span> h = f(p.xz);<br>    <span class=\"hljs-keyword\">if</span>(p.y&lt;h)<br>    &#123;<br>        <span class=\"hljs-comment\">// 计算两个线段的相交点</span><br>        <span class=\"hljs-type\">hit_t</span> = t - dt + dt*(lh-ly)/(p.y-ly-h+lh);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    dt=<span class=\"hljs-number\">0.01f</span>*t;<br>    lh = h;<br>    ly = p.y;<br>&#125;<br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br></code></pre></td></tr></table></figure>\n<p>至此，我们就可以在ShaderToy渲染出地形了。</p>\n<h1 id=\"地形生成\"><a href=\"#地形生成\" class=\"headerlink\" title=\"地形生成\"></a>地形生成</h1><h2 id=\"生成的基础：噪音\"><a href=\"#生成的基础：噪音\" class=\"headerlink\" title=\"生成的基础：噪音\"></a>生成的基础：噪音</h2><p>当我们提到噪音，往往会很生活化的把噪音和声音连接起来，从声学的角度来说是正确的。噪音其实可以用来表示所有通过振幅（amplitude）和频率（frequency）描述的波动，它可以是声音，它可以是辐射，也可以是其他的任意一种波动。</p>\n<p>在数学课上，我们学过正弦、余弦等三角函数，sin和cos其实就是一种噪音的表现方式。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">float</span> amplitude = <span class=\"hljs-number\">1.0</span>;<br><span class=\"hljs-type\">float</span> frequencey = <span class=\"hljs-number\">1.0</span>;<br><span class=\"hljs-type\">float</span> y = amplitude * <span class=\"hljs-built_in\">sin</span>(frequency * x);<br></code></pre></td></tr></table></figure>\n<p>就像上面的代码所示，通过改变amplitude和frequency，我们可以改变sin波形的状态。</p>\n<p>噪音在很多程序化生成算法中都有着举足轻重的地位。</p>\n<h2 id=\"分形布朗运动\"><a href=\"#分形布朗运动\" class=\"headerlink\" title=\"分形布朗运动\"></a>分形布朗运动</h2><p>噪音是一种波，它是可以相互叠加的。两个相同的sin波形叠加会形成振幅更加强大的sin波形，而频率相差π&#x2F;2的两个sin波形叠加后会相互抵消。</p>\n<p>在地形随机生成中，为了最终的结果噪音有着更好的随机性和更好的细节，将会循环多次计算噪音，循环的次数为我们称之为octave。每次循环的同一个噪音以一定倍数（lacunarity）升高频率，同时以一定比例（gain）降低振幅，最终将每个噪音计算的结果叠加得到一个最终的噪音，这个噪音的生成技术叫做“分形布朗运动”（fractal brownian motion，fbm）。</p>\n<p>下面是分形布朗运动的一个简单的代码演示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title function_\">fbm</span><span class=\"hljs-params\">(vec2 uv, <span class=\"hljs-type\">float</span> frequency, <span class=\"hljs-type\">float</span> amplitude, <span class=\"hljs-type\">int</span> octave)</span><br>&#123;<br>\t<span class=\"hljs-type\">float</span> lacunarity = <span class=\"hljs-number\">2.0</span>;<br>\t<span class=\"hljs-type\">float</span> gain = <span class=\"hljs-number\">0.5</span>;<br>\t<span class=\"hljs-type\">float</span> noise_val = <span class=\"hljs-number\">0.0</span>;<br>\t<span class=\"hljs-type\">float</span> amp = amplitude;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> index = <span class=\"hljs-number\">0</span>; index &lt; octave; ++index)<br>\t&#123;<br>\t\tnose_val += noiseInterpolate(uv * frequency) * amp;<br>\t\tamp *= gain;<br>\t\tfrequency *= lacunarity;<br>\t&#125;<br>\t<br>\t<span class=\"hljs-keyword\">return</span> noise_val;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>其中noiseInterpolate可以是perlin noise或者是simplex noise等任意一种噪音算法。<br>demo中的地形生成和云层的生成，也使用了该技术。关于FBM除了上面简单的使用还有很多其他的变种，这里我们就不扩展了，后面有机会的话可以专门介绍一下。</p>\n<h2 id=\"地形的基础表现\"><a href=\"#地形的基础表现\" class=\"headerlink\" title=\"地形的基础表现\"></a>地形的基础表现</h2><p>这里我将地形部分拆解出来。demo的地形计算使用了perlin noise，octave数量达到了11。更多的octave数量会给地形带来更多的细节，但是一般来说后面的效果收益会越来越少。下方是octave数量分布为5和11下的地形的形状对比。<br><img src=\"/2024/10/11/ProceduralTerrainGeneration/shadertoy_oc5_noshadow.png\"><br><img src=\"/2024/10/11/ProceduralTerrainGeneration/shadertoy_oc11_noshadow.png\"></p>\n<p>除了每次叠加噪音会进行频率和振幅的变化，为了获得更好的随机性，以及进一步减少噪音可能出现的重复pattern，可以将噪音进行旋转（也就是将传入的uv或者是坐标乘以一个默认的旋转矩阵）后再叠加到原来的噪音上。</p>\n<p>我们也需要地形的法线来和光源结合，渲染出地形的明暗部分。获得法线的方法有很多种，可以采样当前计算的地形上点的x轴和z轴（这里假定y轴为up）方向不远的一两个点，和目标点相减得到切线和副切线方向，通过叉乘得到目标点的法线。亦或是采样其他点后通过中心差分法求得目标点的法线。</p>\n<h2 id=\"阴影\"><a href=\"#阴影\" class=\"headerlink\" title=\"阴影\"></a>阴影</h2><p>仅仅通过法线来渲染地形的明部和暗部是不够的，我们还需要计算地形投射在地表上的阴影。地形的阴影计算原理非常简单，就是将地形上渲染的目标点，沿着光源方向进行射线检测，如果和地形相交的话，那该点就是处于阴影之下。理想情况下，射线检测的距离当然是实际上光源和地形上的点的距离，但是往往由于性能的原因，我们需要缩短这个距离。<em>实际的检测距离可以结合当前点的高度以及地形可能的最高位置进行计算</em>。</p>\n<p>在判断当前点处于阴影的时候，计算最终颜色的时候需要再乘以一个阴影的系数。<br><img src=\"/2024/10/11/ProceduralTerrainGeneration/shadertoy_oc11_hardshadow.png\"></p>\n<p>为了提升效果，我们通常不希望阴影的边缘非常生硬，而是希望有一种柔软的过度，这种更加符合现实的表现。实现这种软阴影的方法可能有很多种，这里采用的是Inigo教程的一种方法。</p>\n<p>上面提到判定阴影是通过从地形上面的点向光源方向做射线检测得到的，如果和地形相交则该点处于阴影当中，若不相交，则需要再取一个值，这值是地形向着光源方向移动距离t长度的位置，它和地形高度的差值d和距离t的比值的最小值，乘以某个常数X（10~32等等，可以自己尝试合适的范围）后经过smoothstep限制在（0,1）范围内。这个值作为阴影系数放入光照计算后就可以得到不错的软阴影效果。<br><img src=\"/2024/10/11/ProceduralTerrainGeneration/calc_soft_shadow.png\"></p>\n<p>通过下面的对比图我们可以看到，在加入了软阴影计算后，地形阴影的边缘有了一种较为平滑的过度，显得没那么生硬了。想要更改软阴影的表现的话可以通过修改常数X。<br><img src=\"/2024/10/11/ProceduralTerrainGeneration/shadertoy_terrain.png\"></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>好了，我们已经得到了一个基础的程序化生成地形的效果了，但是它看起来还是有些单调。地形的深度表现、天空、云彩等等应该如何表现呢？</p>\n<p>无需着急，我们将会在后面的文章中对它进行进一步的优化。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://thebookofshaders.com/13/?lan=ch\">https://thebookofshaders.com/13/?lan=ch</a><br><a href=\"https://iquilezles.org/articles/morenoise\">https://iquilezles.org/articles/morenoise</a><br><a href=\"https://youtu.be/BFld4EBO2RE?si=HWQMSNx5TBsOG_6g\">https://youtu.be/BFld4EBO2RE?si=HWQMSNx5TBsOG_6g</a></p>\n"},{"title":"个人博客启动","date":"2024-10-09T15:33:59.000Z","_content":"\n晚上好。\n\n还是打算在个人的github.io继续更新自己的技术博客了。[原网站](qrc-eye.com)本来是打算用于和朋友一起写点东西上去的，结果现在倒是变成了只有我自己的碎碎念，着实不太好。\n\n最近一段时间会尽快的将我的部分文章搬运过来，一些琐碎的文章暂时就不管了。\n\n","source":"_posts/StartMyBlog.md","raw":"---\ntitle: 个人博客启动\ndate: 2024-10-09 23:33:59\ncategory: 生活杂谈\ntags: 生活\n---\n\n晚上好。\n\n还是打算在个人的github.io继续更新自己的技术博客了。[原网站](qrc-eye.com)本来是打算用于和朋友一起写点东西上去的，结果现在倒是变成了只有我自己的碎碎念，着实不太好。\n\n最近一段时间会尽快的将我的部分文章搬运过来，一些琐碎的文章暂时就不管了。\n\n","slug":"StartMyBlog","published":1,"updated":"2024-10-10T14:58:34.819Z","comments":1,"layout":"post","photos":[],"_id":"cm24v6xvh0002g05764aq1hd3","content":"<p>晚上好。</p>\n<p>还是打算在个人的github.io继续更新自己的技术博客了。<a href=\"qrc-eye.com\">原网站</a>本来是打算用于和朋友一起写点东西上去的，结果现在倒是变成了只有我自己的碎碎念，着实不太好。</p>\n<p>最近一段时间会尽快的将我的部分文章搬运过来，一些琐碎的文章暂时就不管了。</p>\n","excerpt":"","more":"<p>晚上好。</p>\n<p>还是打算在个人的github.io继续更新自己的技术博客了。<a href=\"qrc-eye.com\">原网站</a>本来是打算用于和朋友一起写点东西上去的，结果现在倒是变成了只有我自己的碎碎念，着实不太好。</p>\n<p>最近一段时间会尽快的将我的部分文章搬运过来，一些琐碎的文章暂时就不管了。</p>\n"}],"PostAsset":[{"_id":"source/_posts/ProceduralTerrainGeneration/calc_soft_shadow.png","slug":"calc_soft_shadow.png","post":"cm24v6xvf0001g05733a8b2sr","modified":0,"renderable":0},{"_id":"source/_posts/ProceduralTerrainGeneration/shadertoy_oc11_hardshadow.png","slug":"shadertoy_oc11_hardshadow.png","post":"cm24v6xvf0001g05733a8b2sr","modified":0,"renderable":0},{"_id":"source/_posts/ProceduralTerrainGeneration/shadertoy_oc11_noshadow.png","slug":"shadertoy_oc11_noshadow.png","post":"cm24v6xvf0001g05733a8b2sr","modified":0,"renderable":0},{"_id":"source/_posts/ProceduralTerrainGeneration/shadertoy_oc5_noshadow.png","slug":"shadertoy_oc5_noshadow.png","post":"cm24v6xvf0001g05733a8b2sr","modified":0,"renderable":0},{"_id":"source/_posts/ProceduralTerrainGeneration/shadertoy_terrain.png","slug":"shadertoy_terrain.png","post":"cm24v6xvf0001g05733a8b2sr","modified":0,"renderable":0},{"_id":"source/_posts/ProceduralTerrainGeneration/shadertoy_terrain_oct5.png","slug":"shadertoy_terrain_oct5.png","post":"cm24v6xvf0001g05733a8b2sr","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cm24v6xvf0001g05733a8b2sr","category_id":"cm24v6xvi0003g057a2evej80","_id":"cm24v6xvl0007g05793rbdxqu"},{"post_id":"cm24v6xvh0002g05764aq1hd3","category_id":"cm24v6xvk0005g0573cev0wya","_id":"cm24v6xvl0009g0578fz7hwig"}],"PostTag":[{"post_id":"cm24v6xvf0001g05733a8b2sr","tag_id":"cm24v6xvj0004g057f5gxgwit","_id":"cm24v6xvm000cg057fktr76p9"},{"post_id":"cm24v6xvf0001g05733a8b2sr","tag_id":"cm24v6xvk0006g0573pe97pn7","_id":"cm24v6xvm000dg057166saq1f"},{"post_id":"cm24v6xvf0001g05733a8b2sr","tag_id":"cm24v6xvl0008g057bro99o9r","_id":"cm24v6xvm000eg0577d2i9y1l"},{"post_id":"cm24v6xvf0001g05733a8b2sr","tag_id":"cm24v6xvl000ag0573c8x49le","_id":"cm24v6xvm000fg057737p80og"},{"post_id":"cm24v6xvh0002g05764aq1hd3","tag_id":"cm24v6xvm000bg057gjai4nli","_id":"cm24v6xvm000gg057620ebst8"}],"Tag":[{"name":"3D","_id":"cm24v6xvj0004g057f5gxgwit"},{"name":"render","_id":"cm24v6xvk0006g0573pe97pn7"},{"name":"渲染","_id":"cm24v6xvl0008g057bro99o9r"},{"name":"编程","_id":"cm24v6xvl000ag0573c8x49le"},{"name":"生活","_id":"cm24v6xvm000bg057gjai4nli"}]}}